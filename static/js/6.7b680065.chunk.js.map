{"version":3,"sources":["models/Validations.js","contexts/ValidationContext.js","hooks/useErrors.js","components/ContactForm/index.js","pages/Contacts/index.js"],"names":["validateName","name","length","valid","text","validateEmail","email","RegExp","test","value","validatePhone","phone","validateMessage","message","noValidate","values","console","log","ValidationContext","React","createContext","city","subject","useErrors","validations","initialState","field","createInitialState","useState","errors","setErrors","isVerified","setIsVerified","event","target","newState","response","alert","ContactForm","onSubmit","setName","setEmail","setPhone","setMessage","useContext","validateInput","onloadCallback","verifyCallback","canSubmit","className","method","action","preventDefault","id","required","type","placeholder","onChange","onBlur","mask","unMask","cols","rows","sitekey","render","Contacts","Provider","container","setContainer","Thanks","window","scrollTo","href","icon","faGithub","faInstagram","faLinkedinIn","faWhatsapp"],"mappings":"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","file":"static/js/6.7b680065.chunk.js","sourcesContent":["function validateName(name) {\r\n    if ( name.length === 0 ) {\r\n      return ({ valid: false, text: \"*Required\" });\r\n    } else {\r\n      return { valid: true, text: \"\" };\r\n    }\r\n}\r\n  \r\nfunction validateEmail(email) {\r\n    const emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\n    if ( emailRegex.test(email) ) {\r\n    return { valid: true, text: \"\" };\r\n    } \r\n    if ( email.value === \"\" || email.length === 0 ) {\r\n    return { valid: false, text: \"*Required\" };\r\n    } \r\n    else {\r\n    return { valid: false, text: \"E-mail inválido\" };\r\n    }\r\n}\r\n\r\nfunction validatePhone(phone) {\r\n    if ( phone.value === \"\" || phone.length === 0 ) {\r\n      return { valid: false, text: \"*Required\" };\r\n    } \r\n    if ( phone.length !== 14 ) {\r\n      return { valid: false, text: \"Digite um telefone válido\" };\r\n    } \r\n    else {\r\n      return { valid: true, text: \"\" };\r\n    }\r\n}\r\n\r\nfunction validateMessage(message) {\r\n    if (message.length < 10 ) {\r\n      return ({ valid: false, text: \"*Required\" });\r\n    } else {\r\n      return { valid: true, text: \"\" };\r\n    }\r\n}\r\n  \r\n\r\nexport { validateName, validateEmail, validatePhone, validateMessage };","import React from 'react';\r\n\r\nconst ValidationContext = React.createContext({\r\n    name:noValidate,\r\n    email:noValidate,\r\n    phone:noValidate,\r\n    city:noValidate, \r\n    subject:noValidate,\r\n    message:noValidate\r\n});\r\n\r\nfunction noValidate(values){\r\n    console.log(values);\r\n    return { valid:true, text:\"\" }\r\n};\r\n\r\nexport default ValidationContext;","import React, { useState } from 'react';\r\n\r\nfunction useErrors(validations){\r\n    const initialState = createInitialState(validations);\r\n    const [ errors, setErrors ] = useState(initialState);\r\n    const [isVerified, setIsVerified] = useState(false);\r\n\r\n    function onloadCallback() {\r\n        console.log('Captcha loaded');\r\n    }\r\n\r\n    function validateInput(event){\r\n        const {name, value} = event.target;\r\n        const newState = {...errors};\r\n        newState[name] = validations[name](value);\r\n        setErrors(newState);\r\n    }\r\n\r\n    function verifyCallback(response) {\r\n        if (response) {\r\n            setIsVerified(true);\r\n        }\r\n    }\r\n\r\n    function canSubmit(){\r\n        for(let field in errors){\r\n            if( !errors[field].valid ) {\r\n                alert('Por favor, verifique seus dados e tente novamente!');\r\n                return false;\r\n            } else if ( !isVerified ){\r\n                alert('Por favor, certifique-se de que você não é um robô!');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return [errors, validateInput, onloadCallback, verifyCallback, canSubmit];\r\n}\r\n\r\nfunction createInitialState(validations){\r\n    const initialState = {}\r\n    for(let field in validations){\r\n        initialState[field] = { valid: true, text: \"\" }\r\n    }\r\n    return initialState;\r\n}\r\n\r\nexport default useErrors;","import React, { useState, useContext } from 'react';\r\nimport ValidationContext from '../../contexts/ValidationContext';\r\nimport useErrors from '../../hooks/useErrors';\r\nimport Recaptcha from 'react-recaptcha';\r\nimport { mask, unMask } from \"remask\";\r\nimport './style.css';\r\n\r\nexport default function ContactForm({onSubmit}) {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const validations = useContext(ValidationContext);\r\n    const [errors, validateInput, onloadCallback, verifyCallback, canSubmit] = useErrors(validations);\r\n\r\n\r\n    return (\r\n        <div className=\"contact-form\">\r\n            <div className=\"form-wrapper\">\r\n                <form method=\"post\" action=\"/controllers/controllerForm.php\" onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    if(canSubmit()){\r\n                        onSubmit({name, email, phone, message});\r\n                    }\r\n                }}>\r\n                        <div className=\"input-block\" id=\"name-block\">\r\n                            <input\r\n                                required\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                value={name}\r\n                                placeholder=\"Seu Nome\"\r\n                                onChange={(event) => {\r\n                                    setName(event.target.value);\r\n                                }}\r\n                                onBlur={validateInput}\r\n                            />\r\n                            <div className=\"error\">{errors.name.text}</div>\r\n                        </div>\r\n                        <div className=\"input-block\" id=\"email-block\">\r\n                            <input\r\n                                required\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                value={email}\r\n                                placeholder=\"E-mail\"\r\n                                onChange={(event) => {\r\n                                    setEmail(event.target.value);\r\n                                }}\r\n                                onBlur={validateInput}\r\n                            />\r\n                            <div className=\"error\">{errors.email.text}</div>\r\n                        </div>\r\n                        <div className=\"input-block\" id=\"phone-block\">\r\n                            <input\r\n                                required\r\n                                type=\"text\"\r\n                                id=\"phone\"\r\n                                name=\"phone\"\r\n                                value={phone}\r\n                                placeholder=\"Telefone\"\r\n                                onChange={(event) => {\r\n                                    setPhone(mask(unMask(event.target.value), ['(99)99999-9999']));\r\n                                }}\r\n                                onBlur={validateInput}\r\n                            />\r\n                            <div className=\"error\">{errors.phone.text}</div>\r\n                        </div>\r\n                        <div className=\"input-block\" id=\"message-block\">\r\n                            <textarea\r\n                                required\r\n                                id=\"message\"\r\n                                name=\"message\"\r\n                                value={message}\r\n                                placeholder=\"Mensagem\"\r\n                                cols=\"30\"\r\n                                rows=\"8\"\r\n                                onChange={(event) => {\r\n                                    setMessage(event.target.value);\r\n                                }}\r\n                                onBlur={validateInput}\r\n                            />\r\n                            <div className=\"error\">{errors.message.text}</div>\r\n                        </div>\r\n                    <div className=\"input-block\" id=\"recaptcha-block\">\r\n                        <Recaptcha\r\n                            sitekey=\"6LfmvssaAAAAAGqMwHayAvCF-x-QSFZ8ZOKPDXWo\"\r\n                            render=\"explicit\"\r\n                            verifyCallback={verifyCallback}\r\n                            onloadCallback={onloadCallback}\r\n                        />\r\n                        <button\r\n                            className=\"button\"\r\n                            type=\"submit\"\r\n                            id=\"contact-form-btn\"\r\n                            >ENVIAR\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './style.css';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { validateEmail, validateMessage, validateName, validatePhone } from '../../models/Validations';\r\nimport ValidationContext from '../../contexts/ValidationContext';\r\n\r\nimport ContactForm from '../../components/ContactForm';\r\nimport { faGithub, faInstagram, faLinkedinIn, faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function Contacts() {\r\n\r\n    const [container, setContainer] = useState(initial);\r\n\r\n    function onSubmit(values) {\r\n        console.log(values);\r\n        setContainer(<Thanks />);\r\n        window.scrollTo(0,430);\r\n        /*axios.post(``, values)\r\n        .then((response)=>{\r\n            \r\n        });*/\r\n    }\r\n\r\n    function initial() {\r\n        return (\r\n            <>\r\n                <ValidationContext.Provider\r\n                    value={{\r\n                        name: validateName,\r\n                        email: validateEmail,\r\n                        phone: validatePhone,\r\n                        message: validateMessage\r\n                    }}>\r\n                    <ContactForm onSubmit={onSubmit} />\r\n                </ValidationContext.Provider>\r\n            </>\r\n        );\r\n    }\r\n\r\n    function Thanks() {\r\n        return (\r\n            <div className=\"contact-thanks\">\r\n                <h2>Sua mensagem foi enviada!<br></br></h2>\r\n                <h4>Em breve retornarei o contato. Obrigada!</h4>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h2>Contacts</h2>\r\n                <div className=\"line\"></div>\r\n                <p>Você pode entrar em contato comigo através de qualquer uma das minhas redes sociais</p>\r\n                <div className=\"contact-icons\">\r\n                    <a href=\"https://github.com/FabianaMendes\" target=\"new\">\r\n                        <i><FontAwesomeIcon icon={faGithub} /></i>\r\n                    </a>\r\n                    <a href=\"https://www.instagram.com/fabbymendes\" target=\"new\">\r\n                        <i><FontAwesomeIcon icon={faInstagram} /></i>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/fabianamoreiramendes\" target=\"new\">\r\n                        <i><FontAwesomeIcon icon={faLinkedinIn} /></i>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/fabianamoreiramendes\" target=\"new\">\r\n                        <i><FontAwesomeIcon icon={faWhatsapp} /></i>\r\n                    </a>\r\n                </div>\r\n                <p>ou se preferir através do formulário abaixo:</p>\r\n                <div className=\"form-container\">\r\n                    {container}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"sourceRoot":""}